using UnityEngine;
using System.Collections;
using System;

public class Spawner : MonoBehaviour
{
	[SerializeField]
	EnemyMovePath enemyToSpawnRef;
	[SerializeField]
	Pickup pickupRef;
	[SerializeField]
	Transform trigger;
	[SerializeField]
	SpawnProp spawnProp;
	public PatrolPath path;
	[SerializeField]
	int spawnCount;
	[SerializeField]
	float spawnDelay = 0.2f;
	public int phase2WpIndex = 1;

	[SerializeField]
	Color colorTrigger = new Color(0f, 0.6f, 0f);
	Color colorLink2SpawnPt = new Color(0.0f, 0.7f, 0.9f);
	Color colorLink2Trigger = new Color(0.6f, 0.6f, 0.6f);
	Color colorLink2SpawnProp = new Color(0.9f, 0.0f, 0.9f);
	int enemiesKilled;
	int enemiesSpawned;
	bool isSpawnPropKilled;
	Transform[] miscPoints;


	void Awake()
	{
		SpawnerMiscPoints smp = GetComponent<SpawnerMiscPoints>();
		if (smp != null)
		{
			miscPoints = smp.points;
		}
	}


	void OnEnable()
	{
		if (spawnProp != null)
		{
			spawnProp.OnOpened += handleOnSpawnPropOpened;
			spawnProp.healthManager.OnKilledInstance += handleOnSpawnPropKilled;
		}
	}


	void OnDisable()
	{
		if (spawnProp != null)
		{
			spawnProp.OnOpened -= handleOnSpawnPropOpened;
			spawnProp.healthManager.OnKilledInstance -= handleOnSpawnPropKilled;
		}
	}


	void handleOnSpawnPropKilled()
	{
		isSpawnPropKilled = true;

		//Unregister from instance events
		spawnProp.OnOpened -= handleOnSpawnPropOpened;
		spawnProp.healthManager.OnKilledInstance -= handleOnSpawnPropKilled;
	}


	void handleOnSpawnPropOpened()
	{
		StartCoroutine(coSpawnSeries());

		//Unregister from instance events
		spawnProp.OnOpened -= handleOnSpawnPropOpened;
	}


	void Start()
	{
		enemiesKilled = 0;
		enemiesSpawned = 0;
		isSpawnPropKilled = false;

		//StartCoroutine(coWaitToTrigger());
	}


	IEnumerator coWaitToTrigger()
	{
		//while (trigger.position.x > CamScroller.Me.screenBoundaries.xMax)
		//{
		yield return null;
		//}

		//If there is no spawn prop, we start generating the wave
		if (spawnProp == null)
		{
			StartCoroutine(coSpawnSeries());
		}
		//otherwise we 
		else
		{
			spawnProp.open();
		}
	}


	private IEnumerator coSpawnSeries()
	{
		yield return null;
		float nextSpawnTime = -1f;
		for (int i = 0; i < spawnCount; i++)
		{
			while (Time.time < nextSpawnTime)
			{
				yield return null;
			}
			spawnOneEnemy();
			nextSpawnTime = Time.time + spawnDelay;
		}
	}


	void spawnOneEnemy()
	{
		EnemyMovePath e = Instantiate<EnemyMovePath>(enemyToSpawnRef);
		e.initFromSpawner(this);

		EnemyHealthManager eh = e.gameObject.GetComponent<EnemyHealthManager>();
		if (eh != null)
			eh.register(this);

		if (miscPoints != null)
		{
			EnemyMiscPointsHolder msh = e.gameObject.GetComponent<EnemyMiscPointsHolder>();
			if (msh != null)
			{
				msh.setPointsList(miscPoints);
			}
		}

		enemiesSpawned++;
	}


	//Called by EnemyMove or EnemyHEalth when an enemy generated by this spawner, is destroyed
	public void doOnEnemyDestroyed(bool isKilled, Vector3 pos)
	{
		if (isKilled)
		{
			enemiesKilled++;
			print("killed = " + enemiesKilled + " spawnCount = " + spawnCount);//TEST
			if (enemiesKilled == spawnCount || (isSpawnPropKilled && enemiesKilled == enemiesSpawned))
			{
				mayGivePickup(pos);
			}
		}
	}


	private void mayGivePickup(Vector3 pos)
	{
		if (pickupRef != null)
		{
			Instantiate(pickupRef, pos, Quaternion.identity);
		}
	}


	void OnDrawGizmos()
	{
		if (trigger != null)
		{
			//drawing the line from this Spawner object to the trigger point
			Gizmos.color = colorLink2Trigger;
			Gizmos.DrawLine(transform.position, trigger.position);
			//drawing the vertical line of the trigger
			Gizmos.color = colorTrigger;
			Gizmos.DrawLine(new Vector2(trigger.position.x, trigger.position.y - 6f),
				new Vector2(trigger.position.x, trigger.position.y + 6f));
		}

		//drawing a line between the potential spawn prop object and this spawner
		if (spawnProp != null)
		{
			Gizmos.color = colorLink2SpawnProp;
			Gizmos.DrawLine(transform.position, spawnProp.transform.position);
		}
	}

}

